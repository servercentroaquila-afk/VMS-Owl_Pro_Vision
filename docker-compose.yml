version: '3.9'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: vms-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: vms_password_2024
      POSTGRES_DB: vmsdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - vms-network
    restart: unless-stopped

  # Backend FastAPI
  backend:
    build: ./backend
    container_name: vms-backend
    environment:
      - DATABASE_URL=postgresql://postgres:vms_password_2024@db:5432/vmsdb
      - HIK_SDK_PATH=/app/sdk/hikvision/HCNetSDK.dll
      - DAHUA_SDK_PATH=/app/sdk/dahua/dhnetsdk.dll
      - HLS_ROOT=/var/www/hls
      - SECRET_KEY=your-secret-key-change-in-production-2024
      - FFMPEG_PATH=ffmpeg
    volumes:
      - ./backend/sdk:/app/sdk:ro
      - hls_data:/var/www/hls
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - vms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamer FFmpeg
  streamer:
    build: ./streamer
    container_name: vms-streamer
    volumes:
      - hls_data:/var/www/hls
    ports:
      - "1935:1935"
    networks:
      - vms-network
    restart: unless-stopped
    depends_on:
      - backend

  # Frontend React
  frontend:
    build: ./frontend
    container_name: vms-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - vms-network
    restart: unless-stopped

  # Nginx (opcional, para servir archivos HLS)
  nginx:
    image: nginx:alpine
    container_name: vms-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - hls_data:/var/www/hls:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - vms-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  hls_data:
    driver: local

networks:
  vms-network:
    driver: bridge
